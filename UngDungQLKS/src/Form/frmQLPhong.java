package Form;

import Databasee.Databasee;
import static Databasee.Databasee.getConnection;
import Form.frmQLKhachHang;
import controller.QLPhong;
import java.awt.Color;
import java.awt.event.ActionEvent;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.SQLException;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import java.sql.PreparedStatement;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import javax.swing.JTable;
import java.util.Random;

/**
 *
 * @author admin
 */
public class frmQLPhong extends javax.swing.JFrame {

    /**
     * Creates new form frmQLNhanVien
     */
    public frmQLPhong() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        txtTenPhong = new javax.swing.JTextField();
        btnThem = new javax.swing.JButton();
        btnXoa = new javax.swing.JButton();
        btnSua = new javax.swing.JButton();
        txtTinhTrang = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        txtLoaiPhong = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        txtGiaPhong = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        btnQuayLai = new javax.swing.JButton();
        btnHuyBo = new javax.swing.JButton();
        btnLuu = new javax.swing.JButton();
        txtMaPhong = new javax.swing.JTextField();
        btnHienBang = new javax.swing.JButton();
        btnTimKiem = new javax.swing.JButton();
        txtTimKiem = new javax.swing.JTextField();
        jLabel11 = new javax.swing.JLabel();
        btndemsophongtrong = new javax.swing.JButton();
        txtNgayDatPhong = new javax.swing.JTextField();
        txtNgayTraPhong = new javax.swing.JTextField();
        jLabel12 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        jPanel3 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tableQLPhong = new javax.swing.JTable();
        btnDatPhong = new javax.swing.JButton();
        btnTraPhong = new javax.swing.JButton();
        btnLichSu = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        tableLichSu = new javax.swing.JTable();
        btnXoaLichSu = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 36)); // NOI18N
        jLabel1.setText("BẢNG QUẢN LÝ PHÒNG");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(340, 340, 340)
                .addComponent(jLabel1)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jLabel1)
                .addGap(0, 12, Short.MAX_VALUE))
        );

        jLabel2.setText("Tên Phòng:");

        jLabel3.setText("Mã Phòng:");

        btnThem.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        btnThem.setText("Thêm");
        btnThem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnThemActionPerformed(evt);
            }
        });

        btnXoa.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        btnXoa.setText("Xóa");
        btnXoa.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnXoaActionPerformed(evt);
            }
        });

        btnSua.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        btnSua.setText("Sửa");
        btnSua.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSuaActionPerformed(evt);
            }
        });

        jLabel5.setText("Loại Phòng:");

        jLabel6.setText("Giá Phòng:");

        jLabel7.setText("Tình Trạng:");

        btnQuayLai.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        btnQuayLai.setText("Quay Lại");
        btnQuayLai.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnQuayLaiActionPerformed(evt);
            }
        });

        btnHuyBo.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        btnHuyBo.setText("Hủy Bỏ");
        btnHuyBo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnHuyBoActionPerformed(evt);
            }
        });

        btnLuu.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        btnLuu.setText("Lưu");
        btnLuu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLuuActionPerformed(evt);
            }
        });

        btnHienBang.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        btnHienBang.setText("Hiện Bảng");
        btnHienBang.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnHienBangActionPerformed(evt);
            }
        });

        btnTimKiem.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        btnTimKiem.setText("Tìm kiếm Phòng Trống");
        btnTimKiem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnTimKiemActionPerformed(evt);
            }
        });

        jLabel11.setText("Ngày đặt phòng:");

        btndemsophongtrong.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        btndemsophongtrong.setText("Tính số phòng trống");
        btndemsophongtrong.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btndemsophongtrongActionPerformed(evt);
            }
        });

        jLabel12.setText("Tìm kiếm:");

        jLabel13.setText("Ngày trả phòng:");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(24, 24, 24)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(txtTinhTrang, javax.swing.GroupLayout.PREFERRED_SIZE, 165, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtGiaPhong, javax.swing.GroupLayout.PREFERRED_SIZE, 165, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addGap(18, 18, 18)
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addGroup(jPanel2Layout.createSequentialGroup()
                                        .addComponent(jLabel11)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(txtNgayDatPhong, javax.swing.GroupLayout.PREFERRED_SIZE, 137, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(jPanel2Layout.createSequentialGroup()
                                        .addComponent(jLabel13)
                                        .addGap(18, 18, 18)
                                        .addComponent(txtNgayTraPhong, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addContainerGap(12, Short.MAX_VALUE))
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addGap(39, 39, 39)
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(btndemsophongtrong, javax.swing.GroupLayout.DEFAULT_SIZE, 197, Short.MAX_VALUE)
                                    .addComponent(btnHienBang, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addGap(0, 0, Short.MAX_VALUE))))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(btnLuu, javax.swing.GroupLayout.PREFERRED_SIZE, 115, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(btnThem, javax.swing.GroupLayout.PREFERRED_SIZE, 115, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(28, 28, 28)
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(btnHuyBo, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 115, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(btnSua, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 115, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(jLabel12)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(btnTimKiem)
                                    .addComponent(txtTimKiem, javax.swing.GroupLayout.PREFERRED_SIZE, 175, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addGap(37, 37, 37)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(btnQuayLai, javax.swing.GroupLayout.DEFAULT_SIZE, 114, Short.MAX_VALUE)
                            .addComponent(btnXoa, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel3)
                            .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addComponent(jLabel2, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jLabel5, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addComponent(jLabel7))
                        .addGap(29, 29, 29)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(txtMaPhong, javax.swing.GroupLayout.DEFAULT_SIZE, 165, Short.MAX_VALUE)
                            .addComponent(txtLoaiPhong)
                            .addComponent(txtTenPhong))
                        .addContainerGap())))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(txtMaPhong, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtTenPhong, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(30, 30, 30)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtLoaiPhong, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtGiaPhong, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btndemsophongtrong, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtTinhTrang, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnHienBang, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(33, 33, 33)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnSua, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnXoa, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnThem, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnHuyBo, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnLuu, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnQuayLai, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(23, 23, 23)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtTimKiem, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel11)
                    .addComponent(txtNgayDatPhong, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel12))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnTimKiem, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtNgayTraPhong, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel13))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        tableQLPhong.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        tableQLPhong.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "MaPhong", "TenPhong", "LoaiPhong", "GiaPhong", "TinhTrang"
            }
        ));
        jScrollPane1.setViewportView(tableQLPhong);

        btnDatPhong.setText("Đặt Phòng");
        btnDatPhong.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDatPhongActionPerformed(evt);
            }
        });

        btnTraPhong.setText("Trả Phòng");
        btnTraPhong.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnTraPhongActionPerformed(evt);
            }
        });

        btnLichSu.setText("Lịch Sử Đặt Phòng");
        btnLichSu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLichSuActionPerformed(evt);
            }
        });

        tableLichSu.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "MaDatPhong", "MaPhong", "TenPhong", "NgayDatPhong", "NgayTraPhong"
            }
        ));
        jScrollPane2.setViewportView(tableLichSu);

        btnXoaLichSu.setText("Xóa Lịch Sử");
        btnXoaLichSu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnXoaLichSuActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane2)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 715, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel3Layout.createSequentialGroup()
                        .addComponent(btnDatPhong, javax.swing.GroupLayout.PREFERRED_SIZE, 89, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(34, 34, 34)
                        .addComponent(btnTraPhong, javax.swing.GroupLayout.PREFERRED_SIZE, 89, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(47, 47, 47)
                        .addComponent(btnLichSu)
                        .addGap(32, 32, 32)
                        .addComponent(btnXoaLichSu)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 211, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(9, 9, 9)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnDatPhong, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnTraPhong, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnLichSu, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnXoaLichSu, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(15, 15, 15)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 226, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 50, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(14, 14, 14)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(14, 14, 14)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(273, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnThemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnThemActionPerformed

        // Lấy dữ liệu từ form
        String maPhong = txtMaPhong.getText();
        String tenPhong = txtTenPhong.getText();
        String loaiPhong = txtLoaiPhong.getText();
        double giaPhong = Double.parseDouble(txtGiaPhong.getText());
        String tinhTrang = txtTinhTrang.getText();

        // Tạo đối tượng QLPhong
        QLPhong nv = new QLPhong(maPhong, tenPhong, loaiPhong, giaPhong, tinhTrang);

        //thêm bản ghi vào cơ sở dữ liệu
        try {
            Connection conn = getConnection();

            // Thêm nhân viên vào cơ sở dữ liệu
            if (nv.themPhong()) {
                JOptionPane.showMessageDialog(null, "Thêm phòng thành công!");
                loadDataIntoTable();
            } else {
                JOptionPane.showMessageDialog(null, "Thêm phòng thất bại!");
            }
            conn.close();
        } catch (SQLException ex) {
            ex.printStackTrace();
            JOptionPane.showMessageDialog(this, "Có lỗi khi thêm phòng.");
        }
    }//GEN-LAST:event_btnThemActionPerformed

    public void loadDataIntoTable() {
        Connection conn = getConnection();
        DefaultTableModel model = (DefaultTableModel) tableQLPhong.getModel();  // tableQLNhanVien là tên JTable
        model.setRowCount(0);  // Xóa dữ liệu cũ trong bảng (nếu có)

        try {
            String sql = "SELECT MaPhong, TenPhong, LoaiPhong, GiaPhong, TinhTrang FROM dbo.Phong";
            var ps = conn.prepareStatement(sql);
            var rs = ps.executeQuery();

            // Đổ dữ liệu vào JTable
            while (rs.next()) {
                String maPhong = rs.getString("MaPhong");
                String tenPhong = rs.getString("TenPhong");
                String loaiPhong = rs.getString("LoaiPhong");
                String giaPhong = rs.getString("GiaPhong");
                String tinhTrang = rs.getString("TinhTrang");
                // Thêm dữ liệu vào model của JTable
                model.addRow(new Object[]{maPhong, tenPhong, loaiPhong, giaPhong, tinhTrang});
            }

            rs.close();
            ps.close();
            conn.close();
        } catch (SQLException ex) {
            ex.printStackTrace();
        }
    }

    private void btnXoaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnXoaActionPerformed
        // Lấy dòng đã chọn trong JTable
        int selectedRow = tableQLPhong.getSelectedRow();

        // Kiểm tra xem có dòng nào được chọn không
        if (selectedRow == -1) {
            JOptionPane.showMessageDialog(null, "Vui lòng chọn phòng cần xóa!");
        } else {
            // Lấy giá trị MaNV từ dòng đã chọn (cột MaNV ở vị trí 0)
            String maPhong = tableQLPhong.getValueAt(selectedRow, 0).toString();

            // Xác nhận trước khi xóa
            int confirm = JOptionPane.showConfirmDialog(null, "Bạn có chắc muốn xóa phòng có mã: " + maPhong + "?", "Xác nhận", JOptionPane.YES_NO_OPTION);
            if (confirm == JOptionPane.YES_OPTION) {
                // Thực hiện xóa nhân viên trong cơ sở dữ liệu
                Connection conn = getConnection();
                try {
                    String sql = "DELETE FROM dbo.Phong WHERE MaPhong = ?";
                    PreparedStatement ps = conn.prepareStatement(sql);
                    ps.setString(1, maPhong);  // Gán giá trị MaPhong vào câu lệnh SQL

                    int rowsDeleted = ps.executeUpdate();  // Thực thi lệnh xóa
                    if (rowsDeleted > 0) {
                        JOptionPane.showMessageDialog(null, "Xóa phòng thành công!");

                        loadDataIntoTable();  // Cập nhật lại JTable sau khi xóa
                    } else {
                        JOptionPane.showMessageDialog(null, "Xóa phòng thất bại!");
                    }

                    ps.close();
                    conn.close();
                } catch (SQLException ex) {
                    ex.printStackTrace();
                    JOptionPane.showMessageDialog(null, "Có lỗi xảy ra khi xóa dữ liệu!");
                }
            }
        }
    }//GEN-LAST:event_btnXoaActionPerformed

    private void btnLuuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLuuActionPerformed
        // Lấy dữ liệu đã được sửa từ các JTextField
        String maPhong = txtMaPhong.getText();
        String tenPhong = txtTenPhong.getText();
        String loaiPhong = txtLoaiPhong.getText();
        String giaPhong = txtGiaPhong.getText();
        String tinhTrang = txtTinhTrang.getText();

        // Kiểm tra xem dữ liệu đã nhập đầy đủ chưa
        if (maPhong.isEmpty() || tenPhong.isEmpty() || loaiPhong.isEmpty() || giaPhong.isEmpty() || tinhTrang.isEmpty()) {
            JOptionPane.showMessageDialog(null, "Vui lòng nhập đầy đủ thông tin!");
        } else {
            // Cập nhật dữ liệu vào cơ sở dữ liệu
            Connection conn = getConnection();
            try {
                String sql = "UPDATE dbo.Phong SET TenPhong = ?, LoaiPhong = ?, GiaPhong = ?, TinhTrang = ? WHERE MaPhong = ?";
                var ps = conn.prepareStatement(sql);

                // Gán giá trị cho các tham số trong câu lệnh SQL
                ps.setString(1, tenPhong);
                ps.setString(2, loaiPhong);
                ps.setString(3, giaPhong);
                ps.setString(4, tinhTrang);
                ps.setString(5, maPhong);  // Điều kiện WHERE: MaPhong

                // Thực thi lệnh cập nhật
                int rowsUpdated = ps.executeUpdate();
                if (rowsUpdated > 0) {
                    JOptionPane.showMessageDialog(null, "Cập nhật phòng thành công!");
                    loadDataIntoTable();  // Cập nhật lại JTable sau khi lưu
                } else {
                    JOptionPane.showMessageDialog(null, "Cập nhật phòng thất bại!");
                }

                ps.close();
                conn.close();
            } catch (SQLException ex) {
                ex.printStackTrace();
                JOptionPane.showMessageDialog(null, "Có lỗi xảy ra khi cập nhật dữ liệu!");
            }
        }
    }//GEN-LAST:event_btnLuuActionPerformed

    private void btnQuayLaiActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnQuayLaiActionPerformed
        // Tạo instance của form frmTrangChu và hiển thị nó
        frmTrangChu trangChu = new frmTrangChu();
        trangChu.setVisible(true);

        // Ẩn form hiện tại
        this.dispose();
    }//GEN-LAST:event_btnQuayLaiActionPerformed

    private void btnSuaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSuaActionPerformed
        // Lấy dòng đã chọn trong JTable
        int selectedRow = tableQLPhong.getSelectedRow();

        // Kiểm tra xem có dòng nào được chọn không
        if (selectedRow == -1) {
            JOptionPane.showMessageDialog(null, "Vui lòng chọn phòng cần sửa!");
        } else {
            // Lấy giá trị của từng cột từ hàng được chọn trong JTable
            String maPhong = tableQLPhong.getValueAt(selectedRow, 0).toString();
            String tenPhong = tableQLPhong.getValueAt(selectedRow, 1).toString();
            String loaiPhong = tableQLPhong.getValueAt(selectedRow, 2).toString();
            String giaPhong = tableQLPhong.getValueAt(selectedRow, 3).toString();
            String tinhTrang = tableQLPhong.getValueAt(selectedRow, 4).toString();

            // Hiển thị dữ liệu lên các JTextField để người dùng có thể chỉnh sửa
            txtMaPhong.setText(maPhong);
            txtTenPhong.setText(tenPhong);
            txtLoaiPhong.setText(loaiPhong);
            txtGiaPhong.setText(giaPhong);
            txtTinhTrang.setText(tinhTrang);
        }
    }//GEN-LAST:event_btnSuaActionPerformed

    private void btnHuyBoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnHuyBoActionPerformed

        txtGiaPhong.setText("");
        txtMaPhong.setText("");
        txtLoaiPhong.setText("");
        txtTinhTrang.setText("");
        txtTenPhong.setText("");
    }//GEN-LAST:event_btnHuyBoActionPerformed

    private void btnHienBangActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnHienBangActionPerformed
        // Gọi phương thức loadDataIntoTable để hiển thị dữ liệu lên JTable
        loadDataIntoTable();
    }//GEN-LAST:event_btnHienBangActionPerformed

    private void btnTimKiemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnTimKiemActionPerformed

        String loaiPhong = txtTimKiem.getText().trim();
        String tinhTrang = txtTimKiem.getText().trim();

        if (loaiPhong.isEmpty() || tinhTrang.isEmpty()) {
            JOptionPane.showMessageDialog(null, "Vui lòng nhập loại phòng cần tìm!", "Lỗi", JOptionPane.ERROR_MESSAGE);
        } else {
            // Sử dụng constructor trống để tránh kiểm tra các giá trị không cần thiết
            QLPhong qlphong = new QLPhong();
            DefaultTableModel model = qlphong.timKiemPhong(loaiPhong, tinhTrang);
            tableQLPhong.setModel(model); // Cập nhật JTable với kết quả tìm kiếm
        }

    }//GEN-LAST:event_btnTimKiemActionPerformed

    private void btndemsophongtrongActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btndemsophongtrongActionPerformed
        QLPhong qlPhong = new QLPhong(); // Tạo đối tượng QLPhong
        int soPhongTrong = qlPhong.demSoPhongTrong(); // Gọi phương thức đếm số phòng trống

        // Hiển thị kết quả
        JOptionPane.showMessageDialog(this,
                "Số phòng trống hiện tại: " + soPhongTrong,
                "Thông báo",
                JOptionPane.INFORMATION_MESSAGE);
    }//GEN-LAST:event_btndemsophongtrongActionPerformed

    private void btnDatPhongActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDatPhongActionPerformed
        // Lấy dòng được chọn trong JTable
        int selectedRow = tableQLPhong.getSelectedRow();
        if (selectedRow == -1) {
            JOptionPane.showMessageDialog(this, "Vui lòng chọn một phòng trong danh sách!");
            return;
        }

        // Lấy thông tin phòng từ JTable
        String maPhong = tableQLPhong.getValueAt(selectedRow, 0).toString(); // Cột mã phòng
        String tenPhong = tableQLPhong.getValueAt(selectedRow, 1).toString(); // Cột tên phòng
        String tinhTrang = tableQLPhong.getValueAt(selectedRow, 4).toString(); // Cột tình trạng (giả sử cột 4)

        // Kiểm tra trạng thái phòng
        if (tinhTrang.equalsIgnoreCase("Còn Trống")) {
            // Tạo mã khách hàng ngẫu nhiên từ 1001 trở lên
            int maKhachHang = 1001 + (int) (Math.random() * 1000); // Tạo số ngẫu nhiên từ 1001 trở lên
            System.out.println("Mã khách hàng được tạo: " + maKhachHang);

            // Lấy ngày đặt phòng và ngày trả phòng từ JTextField (người dùng nhập)
            String ngayDatPhongStr = txtNgayDatPhong.getText();
            String ngayTraPhongStr = txtNgayTraPhong.getText();

            // Kiểm tra nếu người dùng chưa nhập ngày
            if (ngayDatPhongStr.isEmpty() || ngayTraPhongStr.isEmpty()) {
                JOptionPane.showMessageDialog(this, "Vui lòng nhập cả Ngày Đặt Phòng và Ngày Trả Phòng!");
                return;
            }

            // Chuyển đổi chuỗi ngày thành java.sql.Date
            SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
            java.util.Date ngayDatPhong = null;
            java.util.Date ngayTraPhong = null;

            try {
                ngayDatPhong = dateFormat.parse(ngayDatPhongStr);
                ngayTraPhong = dateFormat.parse(ngayTraPhongStr);
            } catch (ParseException e) {
                JOptionPane.showMessageDialog(this, "Định dạng ngày không hợp lệ! Vui lòng nhập đúng định dạng (yyyy-MM-dd)."); //Năm-tháng-ngày
                return;
            }

            // Kiểm tra nếu ngày trả phòng trước ngày đặt phòng
            if (ngayTraPhong.before(ngayDatPhong)) {
                JOptionPane.showMessageDialog(this, "Ngày trả phòng không thể trước ngày đặt phòng!");
                return;
            }

            // Cập nhật trạng thái phòng trong cơ sở dữ liệu
            try {
                // Kết nối cơ sở dữ liệu
                Connection conn = Databasee.getConnection(); // Giả sử bạn đã có lớp `Databasee` để quản lý kết nối            

                // Cập nhật trạng thái phòng trong bảng dbo.Phong
                String sqlPhong = "UPDATE dbo.Phong SET TinhTrang = ? WHERE MaPhong = ?";
                PreparedStatement psPhong = conn.prepareStatement(sqlPhong);
                psPhong.setString(1, "Đang Được Thuê"); // Đặt trạng thái thành "Đang Được Thuê"
                psPhong.setString(2, maPhong);

                int rowsUpdated = psPhong.executeUpdate();
                if (rowsUpdated > 0) {
                    // Cập nhật thành công trạng thái phòng trong JTable
                    tableQLPhong.setValueAt("Đang Được Thuê", selectedRow, 4); // Cập nhật trạng thái trong JTable

                    // Tạo mã đặt phòng ngẫu nhiên
                    int maDatPhong = 1001 + (int) (Math.random() * 1000); // Tạo mã đặt phòng từ 1001 trở lên
                    System.out.println("Mã đặt phòng được tạo: " + maDatPhong);

                    // Lưu thông tin vào bảng dbo.LichSuTraPhong
                    String sqlLichSu = "INSERT INTO dbo.LichSuTraPhong (MaPhong, TenPhong, NgayDatPhong, NgayTraPhong) VALUES (?, ?, ?, ?)";
                    PreparedStatement psLichSu = conn.prepareStatement(sqlLichSu);
                    psLichSu.setString(1, maPhong);
                    psLichSu.setString(2, tenPhong);
                    psLichSu.setDate(3, new java.sql.Date(ngayDatPhong.getTime()));
                    psLichSu.setDate(4, new java.sql.Date(ngayTraPhong.getTime()));

                    int rowsInserted = psLichSu.executeUpdate();
                    if (rowsInserted > 0) {
                        // Cập nhật JTable tableLichSu
                        DefaultTableModel model = (DefaultTableModel) tableLichSu.getModel();
                        Object[] row = {maDatPhong, maPhong, tenPhong, ngayDatPhongStr, ngayTraPhongStr}; // Thêm thông tin vào JTable
                        model.insertRow(0, row); // Thêm dòng vào vị trí đầu tiên (index 0)
                        //model.addRow(row); cái này là thêm vào cuối bảng
                        System.out.println("Thông tin lịch sử đã được ghi vào bảng LichSuTraPhong.");
                    }

                    // Hiển thị thông báo đặt phòng thành công với mã khách hàng ngẫu nhiên
                    JOptionPane.showMessageDialog(this,
                            "Khách hàng với mã số " + maKhachHang + " đã đặt phòng " + tenPhong
                            + " thành công từ " + ngayDatPhongStr + " đến " + ngayTraPhongStr + "!");
                } else {
                    JOptionPane.showMessageDialog(this, "Cập nhật trạng thái phòng thất bại. Vui lòng thử lại!");
                }

                psPhong.close();
                conn.close();
            } catch (Exception e) {
                JOptionPane.showMessageDialog(this, "Lỗi: " + e.getMessage());
                e.printStackTrace();
            }
        } else {
            // Phòng không còn trống
            JOptionPane.showMessageDialog(this, "Phòng không còn trống! Vui lòng chọn phòng khác.");
        }
    }//GEN-LAST:event_btnDatPhongActionPerformed

    private void btnTraPhongActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnTraPhongActionPerformed
        // Lấy dòng được chọn trong JTable tableQLPhong
        int selectedRow = tableQLPhong.getSelectedRow();
        if (selectedRow == -1) {
            JOptionPane.showMessageDialog(this, "Vui lòng chọn một phòng trong danh sách để trả phòng!");
            return;
        }

        // Lấy thông tin phòng từ JTable
        String maPhong = tableQLPhong.getValueAt(selectedRow, 0).toString(); // Mã phòng
        String tenPhong = tableQLPhong.getValueAt(selectedRow, 1).toString(); // Tên phòng
        String tinhTrang = tableQLPhong.getValueAt(selectedRow, 4).toString(); // Tình trạng phòng (cột 4)

        // Lấy dữ liệu từ các JTextField ngày đặt phòng và ngày trả phòng
        String ngayDatPhong = txtNgayDatPhong.getText();  // Lấy ngày đặt phòng từ JTextField
        String ngayTraPhong = txtNgayTraPhong.getText();  // Lấy ngày trả phòng từ JTextField

        // Kiểm tra nếu ngày trả phòng và ngày đặt phòng hợp lệ
        if (ngayDatPhong.isEmpty() || ngayTraPhong.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Vui lòng nhập đầy đủ ngày đặt phòng và ngày trả phòng!");
            return;
        }

        // Kiểm tra định dạng ngày (yyyy-MM-dd)
        try {
            java.time.LocalDate.parse(ngayDatPhong);  // Kiểm tra ngày đặt phòng
            java.time.LocalDate.parse(ngayTraPhong);  // Kiểm tra ngày trả phòng
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Định dạng ngày không hợp lệ. Vui lòng nhập theo định dạng yyyy-MM-dd.");
            return;
        }

        // Kiểm tra trạng thái phòng
        if (tinhTrang.equalsIgnoreCase("Đang Được Thuê")) {
            // Cập nhật trạng thái phòng trong cơ sở dữ liệu
            try {
                // Kết nối cơ sở dữ liệu
                Connection conn = Databasee.getConnection();

                // Cập nhật trạng thái phòng trong bảng dbo.Phong
                String sqlUpdate = "UPDATE dbo.Phong SET TinhTrang = ? WHERE MaPhong = ?";
                PreparedStatement psUpdate = conn.prepareStatement(sqlUpdate);
                psUpdate.setString(1, "Còn Trống"); // Đổi trạng thái thành "Còn Trống"
                psUpdate.setString(2, maPhong);

                int rowsUpdated = psUpdate.executeUpdate();
                if (rowsUpdated > 0) {
                    // Cập nhật trạng thái trong JTable
                    tableQLPhong.setValueAt("Còn Trống", selectedRow, 4); // Đổi trạng thái trong JTable                 
                    JOptionPane.showMessageDialog(this, "Phòng " + tenPhong + " đã được trả thành công!");

                } else {
                    JOptionPane.showMessageDialog(this, "Không thể trả phòng. Vui lòng thử lại!");
                }

                psUpdate.close();
                conn.close();
            } catch (Exception e) {
                JOptionPane.showMessageDialog(this, "Lỗi: " + e.getMessage());
                e.printStackTrace();
            }
        } else {
            // Phòng không phải "Đang Được Thuê"
            JOptionPane.showMessageDialog(this, "Phòng không ở trạng thái \"Đang Được Thuê\". Không thể trả phòng!");
        }

    }//GEN-LAST:event_btnTraPhongActionPerformed

    private void btnLichSuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLichSuActionPerformed
        // Xóa dữ liệu hiện tại trong bảng
        DefaultTableModel modelLichSu = (DefaultTableModel) tableLichSu.getModel();
        modelLichSu.setRowCount(0);  // Xóa tất cả các dòng hiện có

        try {
            // Kết nối cơ sở dữ liệu
            Connection conn = Databasee.getConnection();

            String sql = "SELECT * FROM dbo.LichSuTraPhong"; // Truy vấn lấy lịch sử trả phòng
            PreparedStatement ps = conn.prepareStatement(sql);
            var rs = ps.executeQuery();

            // Duyệt qua kết quả và thêm vào JTable
            while (rs.next()) {
                String maDatPhong = rs.getString("MaDatPhong");
                String maPhong = rs.getString("MaPhong");
                String tenPhong = rs.getString("TenPhong");
                String ngayDatPhong = rs.getString("NgayDatPhong");
                String ngayTraPhong = rs.getString("NgayTraPhong");

                // Thêm dòng vào bảng
                modelLichSu.addRow(new Object[]{maDatPhong, maPhong, tenPhong, ngayDatPhong, ngayTraPhong});
            }

            // Đóng kết nối
            rs.close();
            ps.close();
            conn.close();
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(this, "Lỗi khi tải dữ liệu lịch sử: " + e.getMessage());
            e.printStackTrace();
        }
    }//GEN-LAST:event_btnLichSuActionPerformed

    private void btnXoaLichSuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnXoaLichSuActionPerformed
        int selectedRow = tableLichSu.getSelectedRow();
        if (selectedRow == -1) {
            JOptionPane.showMessageDialog(this, "Vui lòng chọn một dòng trong bảng lịch sử để xóa!");
            return;
        }

        // Lấy Mã phòng của dòng được chọn
        String maDatPhong = tableLichSu.getValueAt(selectedRow, 0).toString(); // Mã phòng

        try {
            // Kết nối cơ sở dữ liệu
            Connection conn = Databasee.getConnection();

            // Xóa lịch sử trả phòng khỏi bảng dbo.LichSuTraPhong
            String sqlDelete = "DELETE FROM dbo.LichSuTraPhong WHERE MaDatPhong = ?";
            PreparedStatement psDelete = conn.prepareStatement(sqlDelete);
            psDelete.setString(1, maDatPhong);

            // Thực thi câu lệnh xóa
            int rowsDeleted = psDelete.executeUpdate();
            if (rowsDeleted > 0) {
                // Xóa dòng khỏi JTable
                DefaultTableModel modelLichSu = (DefaultTableModel) tableLichSu.getModel();
                modelLichSu.removeRow(selectedRow);  // Xóa dòng trong JTable

                // Lấy giá trị MaDatPhong lớn nhất còn lại trong bảng để đặt lại IDENTITY
                String sqlGetMaxMaDatPhong = "SELECT MAX(MaDatPhong) FROM dbo.LichSuTraPhong";
                PreparedStatement psGetMaxMaDatPhong = conn.prepareStatement(sqlGetMaxMaDatPhong);
                var rsMax = psGetMaxMaDatPhong.executeQuery();
                int maxMaDatPhong = 0;
                if (rsMax.next()) {
                    maxMaDatPhong = rsMax.getInt(1);
                }

                // Đặt lại giá trị IDENTITY từ giá trị MaDatPhong lớn nhất
                String resetIdentity = "DBCC CHECKIDENT ('dbo.LichSuTraPhong', RESEED, ?)";
                PreparedStatement psResetIdentity = conn.prepareStatement(resetIdentity);
                psResetIdentity.setInt(1, maxMaDatPhong);  // Đặt lại IDENTITY từ giá trị lớn nhất còn lại
                psResetIdentity.execute();
                psResetIdentity.close();

                JOptionPane.showMessageDialog(this, "Lịch sử trả phòng của phòng " + maDatPhong + " đã được xóa!");
            } else {
                JOptionPane.showMessageDialog(this, "Không thể xóa lịch sử trả phòng. Vui lòng thử lại!");
            }

            psDelete.close();
            conn.close();
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(this, "Lỗi khi xóa lịch sử trả phòng: " + e.getMessage());
            e.printStackTrace();
        }
    }//GEN-LAST:event_btnXoaLichSuActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(frmQLPhong.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(frmQLPhong.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(frmQLPhong.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(frmQLPhong.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new frmQLPhong().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnDatPhong;
    private javax.swing.JButton btnHienBang;
    private javax.swing.JButton btnHuyBo;
    private javax.swing.JButton btnLichSu;
    private javax.swing.JButton btnLuu;
    private javax.swing.JButton btnQuayLai;
    private javax.swing.JButton btnSua;
    private javax.swing.JButton btnThem;
    private javax.swing.JButton btnTimKiem;
    private javax.swing.JButton btnTraPhong;
    private javax.swing.JButton btnXoa;
    private javax.swing.JButton btnXoaLichSu;
    private javax.swing.JButton btndemsophongtrong;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable tableLichSu;
    public javax.swing.JTable tableQLPhong;
    private javax.swing.JTextField txtGiaPhong;
    private javax.swing.JTextField txtLoaiPhong;
    private javax.swing.JTextField txtMaPhong;
    private javax.swing.JTextField txtNgayDatPhong;
    private javax.swing.JTextField txtNgayTraPhong;
    private javax.swing.JTextField txtTenPhong;
    private javax.swing.JTextField txtTimKiem;
    private javax.swing.JTextField txtTinhTrang;
    // End of variables declaration//GEN-END:variables
}
